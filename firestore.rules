rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return isAuthenticated() && request.auth.token.role == 'super_admin';
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }

    function isCollaborator() {
      return isAuthenticated() && request.auth.token.role == 'collaborator';
    }
    
    function isMemberOf(organizationId) {
      return request.auth.token.organizationId == organizationId;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Allow super admins to read/write anything for administrative purposes
    match /{document=**} {
        allow read, write: if isSuperAdmin();
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read their own profile.
      // Admins can read profiles within their own organization.
      allow get: if isAuthenticated() && (isOwner(userId) || (isAdmin() && isMemberOf(get(/databases/$(database)/documents/users/$(userId)).data.organizationId)));
      allow list: if isAdmin(); // Admins can list users for management purposes.

      // Users can update their own profile data (e.g., phone, photoUrl).
      // Admins can update profiles within their organization.
      // We protect role, organizationId from being changed by the user themselves.
      allow update: if isAuthenticated() && (isOwner(userId) && !('role' in request.resource.data) && !('organizationId' in request.resource.data))
                    || (isAdmin() && isMemberOf(resource.data.organizationId));

      // Creation/deletion is handled by Cloud Functions for security.
      allow create, delete: if false;
    }
    
    // Rules for the 'organizations' collection
    match /organizations/{organizationId} {
      // Admins and collaborators can read their own organization's document.
      allow get: if isAuthenticated() && isMemberOf(organizationId);
      allow list: if isSuperAdmin(); // Only super admins can list all organizations.
      
      // Creation/deletion/update of organizations is handled by Super Admins via Cloud Functions.
      allow create, update, delete: if isSuperAdmin();

      // Subcollections within an organization
      match /{subcollection}/{docId} {
        // Default deny for unspecified subcollections
        allow read, write: if false;
      }
      
      match /tasks/{taskId} {
        // Members of the organization can read tasks.
        // Admins of the organization can create, update, delete tasks.
        allow read: if isAuthenticated() && isMemberOf(organizationId);
        allow write: if isAdmin() && isMemberOf(organizationId);
      }
      
      match /roles/{roleId} {
        allow read: if isAuthenticated() && isMemberOf(organizationId);
        allow write: if isAdmin() && isMemberOf(organizationId);
      }
      
      match /departments/{deptId} {
        allow read: if isAuthenticated() && isMemberOf(organizationId);
        allow write: if isAdmin() && isMemberOf(organizationId);
      }
      
      match /evaluations/{evalId} {
        // Admins can manage all evaluations in their org.
        // Collaborators can read their own evaluations.
        allow get: if isAuthenticated() && isMemberOf(organizationId) && (isAdmin() || isOwner(resource.data.employeeId));
        allow list: if isAdmin() && isMemberOf(organizationId);
        allow create, update: if isAdmin() && isMemberOf(organizationId);
        
        // Deletion should be rare, restrict to admins.
        allow delete: if isAdmin() && isMemberOf(organizationId);
      }
      
      match /challenges/{challengeId} {
        allow read: if isAuthenticated() && isMemberOf(organizationId);
        allow write: if isAdmin() && isMemberOf(organizationId);
      }
      
      match /challengeParticipations/{partId} {
        // Admins can manage all participations in their org.
        // Collaborators can manage their own participations.
        allow get: if isAuthenticated() && isMemberOf(organizationId) && (isAdmin() || isOwner(resource.data.employeeId));
        allow list: if isAdmin() && isMemberOf(organizationId);
        allow create, update: if isAuthenticated() && isMemberOf(organizationId) && (isAdmin() || isOwner(resource.data.employeeId));
        allow delete: if isAdmin() && isMemberOf(organizationId);
      }

      match /rankingManagement/{configId} {
        allow read, write: if isAdmin() && isMemberOf(organizationId);
      }
      
       match /appSettings/{settingsId} {
        allow read, write: if isAdmin() && isMemberOf(organizationId);
      }
    }
    
    // Rules for top-level collections managed only by Super Admins
    match /plans/{planId} {
        allow read: if isAuthenticated(); // All authenticated users can read plans to see options
        allow write: if isSuperAdmin();
    }
    
    match /awards/{awardId} {
        allow read: if isAuthenticated(); // All authenticated users can read awards
        allow write: if isSuperAdmin();
    }
    
    match /awardHistory/{historyId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin(); // Admins can confirm winners
    }
  }
}
