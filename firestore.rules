
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // - Authenticated users can read their own profile.
    // - Admins can read/write users within their own organization.
    // - Super Admins can read/write any user.
    match /users/{userId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || 
                      (request.auth.token.role == 'admin' && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == resource.data.organizationId) ||
                      request.auth.token.role == 'super_admin');
      allow write: if request.auth != null &&
                      (request.auth.uid == userId || // Allow user to update their own profile (limited fields typically)
                       (request.auth.token.role == 'admin' && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizationId == resource.data.organizationId) ||
                       request.auth.token.role == 'super_admin');
      // Consider more granular write rules (e.g. user can only update certain fields of their own profile)
    }

    // Organizations collection:
    // - Super Admins can read/write all organizations.
    // - Admins/Collaborators can read their own organization's details.
    match /organizations/{organizationId} {
      allow read: if request.auth != null && 
                     (request.auth.token.organizationId == organizationId || 
                      request.auth.token.role == 'super_admin');
      allow write: if request.auth != null && 
                      request.auth.token.role == 'super_admin'; // Only super_admins can create/update/delete orgs

      // Tasks subcollection (within an organization)
      // - Admins/Super Admins of the org can read/write tasks.
      // - Collaborators of the org can read tasks.
      match /tasks/{taskId} {
        allow read: if request.auth != null && 
                       (request.auth.token.organizationId == organizationId || 
                        request.auth.token.role == 'super_admin');
        allow write: if request.auth != null &&
                        ((request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) ||
                         request.auth.token.role == 'super_admin');
      }
      
      // Departments subcollection (within an organization)
      // - Admins/Super Admins of the org can read/write departments.
      // - Collaborators of the org can read departments.
      match /departments/{departmentId} {
        allow read: if request.auth != null && 
                       (request.auth.token.organizationId == organizationId || 
                        request.auth.token.role == 'super_admin');
        allow write: if request.auth != null &&
                        ((request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) ||
                         request.auth.token.role == 'super_admin');
      }
      
      // Roles subcollection (within an organization)
      // - Admins/Super Admins of the org can read/write roles.
      // - Collaborators of the org can read roles.
      match /roles/{roleId} {
         allow read: if request.auth != null && 
                       (request.auth.token.organizationId == organizationId || 
                        request.auth.token.role == 'super_admin');
        allow write: if request.auth != null &&
                        ((request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) ||
                         request.auth.token.role == 'super_admin');
      }

      // Evaluations subcollection (within an organization)
      // - Admins/Super Admins of the org can read/write evaluations.
      // - Collaborators can read their own evaluations.
      match /evaluations/{evaluationId} {
         allow read: if request.auth != null &&
                        (request.auth.token.organizationId == organizationId && (request.auth.token.role == 'admin' || resource.data.employeeId == request.auth.uid)) ||
                        request.auth.token.role == 'super_admin';
         allow write: if request.auth != null &&
                         ((request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) ||
                          request.auth.token.role == 'super_admin');
      }
      
      // Challenges subcollection (within an organization)
      // - Admins/Super Admins of the org can read/write challenges.
      // - Collaborators of the org can read challenges.
      match /challenges/{challengeId} {
         allow read: if request.auth != null && 
                       (request.auth.token.organizationId == organizationId || 
                        request.auth.token.role == 'super_admin');
        allow write: if request.auth != null &&
                        ((request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) ||
                         request.auth.token.role == 'super_admin');
      }

      // Challenge Participations subcollection (within an organization)
      // - Admins/Super Admins can read all participations in their org.
      // - Collaborators can read/write their own participations.
      match /challengeParticipations/{participationId} {
          allow read: if request.auth != null &&
                         (request.auth.token.organizationId == organizationId ||
                          request.auth.token.role == 'super_admin');
          allow create: if request.auth != null && 
                           request.auth.token.organizationId == organizationId && 
                           request.resource.data.employeeId == request.auth.uid; // User can create their own participation
          allow update: if request.auth != null && 
                           ((request.auth.token.organizationId == organizationId && request.resource.data.employeeId == request.auth.uid) || // User can update own
                           (request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) || // Admin can update any in their org
                           request.auth.token.role == 'super_admin');
          allow delete: if request.auth != null && // Generally restrict delete or handle carefully
                           ((request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) ||
                            request.auth.token.role == 'super_admin');
      }

      // Awards subcollection (within an organization)
      // - Admins/Super Admins can read/write awards.
      // - Collaborators can read awards.
      match /awards/{awardId} {
         allow read: if request.auth != null && 
                       (request.auth.token.organizationId == organizationId || 
                        request.auth.token.role == 'super_admin');
        allow write: if request.auth != null &&
                        ((request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) ||
                         request.auth.token.role == 'super_admin');
      }
      
      // Ranking Data (example path, adjust as needed)
      match /rankings/{rankingPeriodId} {
         allow read: if request.auth != null && 
                       (request.auth.token.organizationId == organizationId || 
                        request.auth.token.role == 'super_admin');
        allow write: if request.auth != null && // Usually only admins/super_admins or backend processes write ranking
                        ((request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId) ||
                         request.auth.token.role == 'super_admin');
      }
    }
    
    // Plans collection (Global)
    // - Authenticated users can read plans (e.g. for a pricing page).
    // - Only Super Admins can create/update/delete plans.
    match /plans/{planId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.role == 'super_admin';
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
