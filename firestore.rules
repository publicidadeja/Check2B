
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.role == 'super_admin';
    }

    function isAdminOfOrg(orgIdFromPath) {
      return isSignedIn() && request.auth.token.role == 'admin' && request.auth.token.organizationId == orgIdFromPath;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userDocId} {
      // TESTE RANKING: Permitir que qualquer usuário autenticado leia qualquer perfil
      // se o organizationId do perfil corresponder ao organizationId do token do solicitante
      // OU se for o próprio usuário
      allow read: if (isSignedIn() && request.auth.token.organizationId == resource.data.organizationId && (request.auth.token.role == 'admin' || request.auth.token.role == 'collaborator')) ||
                     (isSignedIn() && request.auth.uid == userDocId) ||
                     isSuperAdmin();

      allow create: if isSuperAdmin();
      allow update: if (isSignedIn() && request.auth.uid == userDocId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['phone', 'photoUrl', 'updatedAt', 'settings'])) || // Adicionado 'settings' se for para atualizar direto aqui
                       (isAdminOfOrg(resource.data.organizationId)) ||
                       isSuperAdmin();
      allow delete: if isSuperAdmin();

      // User-specific settings subcollection
      match /settings/notifications {
        // TESTE PERFIL: Permitir que o usuário autenticado leia/escreva suas próprias configurações
        allow read, write: if isSignedIn() && request.auth.uid == userDocId;
      }
    }

    // Organizations collection
    match /organizations/{orgId} {
      allow get: if (isSignedIn() && request.auth.token.organizationId == orgId) || isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create, update, delete: if isSuperAdmin();

      // Subcollections
      // TESTE RANKING: Permitir que qualquer usuário autenticado cujo organizationId no token
      // corresponda ao orgId no caminho leia QUALQUER documento em QUALQUER subcoleção.
      match /{subcollection}/{docId} {
        allow read: if isSignedIn() && request.auth.token.organizationId == orgId;
      }

      // Regras de ESCRITA específicas para subcoleções (mantidas mais restritivas)
      match /tasks/{taskId} {
        // A leitura é coberta pela regra genérica acima
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      match /roles/{roleId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      match /departments/{deptId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      match /appSettings/{settingsDoc} {
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      match /rankingManagement/{rankingDoc} {
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      match /challengeManagement/{settingsDoc} {
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      match /challenges/{challengeId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      match /challengeParticipations/{partId} {
        // A leitura é coberta pela regra genérica acima
        allow create: if isSignedIn() && request.auth.token.organizationId == orgId &&
                         request.resource.data.employeeId == request.auth.uid &&
                         request.resource.data.organizationId == orgId;
        allow update: if (isSignedIn() && request.auth.token.organizationId == orgId && request.auth.uid == resource.data.employeeId && resource.data.status == 'accepted' &&
                          request.resource.data.status == 'submitted' && request.resource.data.employeeId == request.auth.uid &&
                          request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'submissionText', 'submissionFileUrl', 'updatedAt', 'submittedAt'])) ||
                         (isAdminOfOrg(orgId) && request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'score', 'feedback', 'evaluatorId', 'evaluatedAt', 'updatedAt'])) ||
                         isSuperAdmin();
        allow delete: if false;
      }
      match /evaluations/{evalId} {
        // A leitura é coberta pela regra genérica acima
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
        allow delete: if false;
      }
       match /awardHistory/{historyId} {
        // A leitura é coberta pela regra genérica acima
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
    }

    // Global collections
    match /awards/{awardId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isSuperAdmin();
    }
    match /plans/{planId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isSuperAdmin();
    }

    // Collection Group Queries
    match /{path=**}/evaluations/{evaluationId} {
      allow read: if isSuperAdmin();
    }
  }
}

    