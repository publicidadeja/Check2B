
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Organizations:
    // Super Admins can read/write all organizations.
    // Authenticated users (like admins of that org) can read their own organization details.
    match /organizations/{organizationId} {
      allow read: if request.auth != null && (request.auth.token.role == 'super_admin' || request.auth.token.organizationId == organizationId);
      allow write: if request.auth.token.role == 'super_admin';

      // Subcollections within an organization
      // Tasks, Evaluations, Challenges, Roles, Departments, etc.
      match /{subcollection}/{docId} {
        // Super Admins can read/write anything within any organization
        allow read, write: if request.auth.token.role == 'super_admin';
        // Admins can read/write anything within their own organization
        allow read, write: if request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId;
        
        // Collaborators can read most data from their organization
        // Specific write access for collaborators (e.g., challenge submissions) would need more granular rules.
        allow read: if request.auth.token.role == 'collaborator' && request.auth.token.organizationId == organizationId;
        
        // Example for collaborator-specific write (e.g., only their own challenge participations)
        // Adjust 'challengeParticipations' and 'employeeId' field as needed
        match /challengeParticipations/{participationId} {
           allow read: if request.auth.token.role == 'collaborator' && request.auth.token.organizationId == organizationId;
           allow create, update: if request.auth.token.role == 'collaborator' 
                                && request.auth.token.organizationId == organizationId
                                && request.resource.data.employeeId == request.auth.uid;
        }
      }
    }

    // Users:
    // Super Admins can read/write all user profiles.
    // Admins can read/write user profiles within their own organization.
    // Users can read their own profile.
    // Users can update specific fields of their own profile (e.g., phone, photoUrl, notification preferences).
    match /users/{userId} {
      allow read: if request.auth.uid == userId 
                    || request.auth.token.role == 'super_admin' 
                    || (request.auth.token.role == 'admin' && resource.data.organizationId == request.auth.token.organizationId);
      
      allow create: if request.auth.token.role == 'super_admin' 
                      || (request.auth.token.role == 'admin' && request.resource.data.organizationId == request.auth.token.organizationId);
                      
      allow update: if request.auth.token.role == 'super_admin' 
                      || (request.auth.token.role == 'admin' && resource.data.organizationId == request.auth.token.organizationId)
                      || (request.auth.uid == userId && request.resource.data.keys().hasAny(['phone', 'photoUrl', 'notificationSettings'])); // Example updatable fields
                      
      allow delete: if request.auth.token.role == 'super_admin' 
                      || (request.auth.token.role == 'admin' && resource.data.organizationId == request.auth.token.organizationId && resource.data.role == 'collaborator');
    }

    // Plans:
    // Authenticated users can read plans (e.g., to display options).
    // Only Super Admins can create, update, or delete plans.
    match /plans/{planId} {
      allow read: if request.auth != null;
      allow write: if request.auth.token.role == 'super_admin';
    }

    // Add more specific rules for other collections as needed (e.g., awards, global settings)
  }
}
