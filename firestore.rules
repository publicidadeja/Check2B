
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Organizations: Super Admins can manage, authenticated users of that org can read.
    match /organizations/{organizationId} {
      allow read: if request.auth != null && (request.auth.token.role == 'super_admin' || request.auth.token.organizationId == organizationId);
      allow write: if request.auth != null && request.auth.token.role == 'super_admin';

      // Tasks within an organization
      match /tasks/{taskId} {
        allow read: if request.auth != null && (request.auth.token.role == 'super_admin' || request.auth.token.organizationId == organizationId);
        allow write: if request.auth != null && 
                       (request.auth.token.role == 'super_admin' || 
                        (request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId));
      }

      // Departments within an organization
      match /departments/{departmentId} {
        allow read: if request.auth != null && (request.auth.token.role == 'super_admin' || request.auth.token.organizationId == organizationId);
        allow write: if request.auth != null &&
                       (request.auth.token.role == 'super_admin' ||
                        (request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId));
      }

      // Roles (cargos) within an organization
      match /roles/{roleId} {
        allow read: if request.auth != null && (request.auth.token.role == 'super_admin' || request.auth.token.organizationId == organizationId);
        allow write: if request.auth != null &&
                       (request.auth.token.role == 'super_admin' ||
                        (request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId));
      }
      
      // Evaluations within an organization
      match /evaluations/{evaluationId} {
        // Admins and Super Admins can read all evaluations in the org.
        // Collaborators can read evaluations where the evaluationId starts with their UID (e.g., "employeeUID-taskId-date").
        allow read: if request.auth != null && 
                       (request.auth.token.role == 'super_admin' ||
                        (request.auth.token.organizationId == organizationId && request.auth.token.role == 'admin') ||
                        (request.auth.token.organizationId == organizationId && request.auth.token.role == 'collaborator' && resource.id.startsWith(request.auth.uid)));
        // Only Admins of the organization and Super Admins can write evaluations.
        allow write: if request.auth != null &&
                        (request.auth.token.role == 'super_admin' ||
                         (request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId));
      }

      // TODO: Add rules for challenges, challengeParticipations, awards, rankings etc.
      // Example for challenges:
      // match /challenges/{challengeId} {
      //   allow read: if request.auth != null && (request.auth.token.role == 'super_admin' || request.auth.token.organizationId == organizationId);
      //   allow write: if request.auth != null && 
      //                  (request.auth.token.role == 'super_admin' || 
      //                   (request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId));
      // }
    }

    // Users: Super Admins can manage all users. Admins can manage users in their own org. Users can read their own profile.
    match /users/{userId} {
      allow read: if request.auth != null && 
                    (request.auth.uid == userId || 
                     request.auth.token.role == 'super_admin' ||
                     (request.auth.token.role == 'admin' && request.auth.token.organizationId == resource.data.organizationId));
      allow write: if request.auth != null && 
                     (request.auth.uid == userId || // Allow user to update their own profile (selectively, more rules needed for fields)
                      request.auth.token.role == 'super_admin' ||
                      (request.auth.token.role == 'admin' && request.auth.token.organizationId == resource.data.organizationId)); 
                      // Admin can only update users of their own org.
                      // For creation, the Cloud Function handles setting the orgId correctly.
    }

    // Plans: Global collection, only Super Admins can write, authenticated users can read.
    match /plans/{planId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.role == 'super_admin';
    }
  }
}
