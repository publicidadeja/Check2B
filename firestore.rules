
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.role == 'super_admin';
    }

    function isAdminOfOrg(orgIdFromPath) {
      return isSignedIn() && request.auth.token.role == 'admin' && request.auth.token.organizationId == orgIdFromPath;
    }

    function isMemberOfOrg(orgIdFromPath) {
      return isSignedIn() && request.auth.token.organizationId == orgIdFromPath && (request.auth.token.role == 'admin' || request.auth.token.role == 'collaborator');
    }

    // Renomeado para clareza do escopo quando usado em regras de subcoleção que referenciam o ID do documento pai.
    function isSelf(docOwnerId) {
      return isSignedIn() && request.auth.uid == docOwnerId;
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userDocId} { // Renomeado {userId} para {userDocId} para clareza
      allow read: if isSelf(userDocId) || 
                     isAdminOfOrg(resource.data.organizationId) || 
                     isMemberOfOrg(resource.data.organizationId) || 
                     isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if (isSelf(userDocId) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['phone', 'photoUrl', 'updatedAt'])) ||
                       (isAdminOfOrg(resource.data.organizationId)) || 
                       isSuperAdmin();
      allow delete: if isSuperAdmin();

      // User-specific settings subcollection
      // CORREÇÃO: Referenciando userDocId do caminho pai explicitamente.
      match /settings/notifications {
        allow read, write: if request.auth != null && request.auth.uid == userDocId; 
      }
    }

    // Organizations collection
    match /organizations/{orgId} {
      allow get: if isMemberOfOrg(orgId) || isSuperAdmin();
      allow list: if isSuperAdmin(); // Somente SuperAdmin pode listar todas as organizações
      allow create, update, delete: if isSuperAdmin();

      // Default read access for members within their organization's subcollections
      // Também permite que SuperAdmin leia.
      match /{subcollection}/{docId} {
        allow read: if isMemberOfOrg(orgId) || isSuperAdmin();
      }

      // --- Specific write rules for subcollections ---
      // As regras de leitura para estas já estão cobertas pela regra genérica acima.

      match /tasks/{taskId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /roles/{roleId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /departments/{deptId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      
      match /appSettings/{settingsDoc} {
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /rankingManagement/{rankingDoc} {
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /challengeManagement/{settingsDoc} {
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /challenges/{challengeId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /challengeParticipations/{partId} {
        // Leitura já coberta pela regra genérica: isMemberOfOrg(orgId)
        allow create: if isMemberOfOrg(orgId) && 
                         request.resource.data.employeeId == request.auth.uid &&
                         request.resource.data.organizationId == orgId; // Garante que está criando na organização correta
        
        allow update: if 
                         // Colaborador submetendo sua própria participação aceita
                         (isMemberOfOrg(orgId) && isSelf(resource.data.employeeId) && resource.data.status == 'accepted' &&
                          request.resource.data.status == 'submitted' && request.resource.data.employeeId == request.auth.uid && // Dupla checagem de segurança
                          request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'submissionText', 'submissionFileUrl', 'updatedAt', 'acceptedAt', 'submittedAt'])) ||
                         // Admin da organização avaliando
                         (isAdminOfOrg(orgId) && request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'score', 'feedback', 'evaluatorId', 'evaluatedAt', 'updatedAt'])) ||
                         // SuperAdmin pode fazer qualquer atualização que admin faz aqui
                         (isSuperAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'score', 'feedback', 'evaluatorId', 'evaluatedAt', 'updatedAt']));
                         
        allow delete: if false; // Participações geralmente não são deletadas.
      }

      match /evaluations/{evalId} {
        // Leitura já coberta pela regra genérica: isMemberOfOrg(orgId)
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
        allow delete: if false; // Avaliações geralmente não são deletadas.
      }

      match /awardHistory/{historyId} {
        // Leitura já coberta pela regra genérica: isMemberOfOrg(orgId)
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
    }

    // Global collections
    match /awards/{awardId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isSuperAdmin();
    }

    match /plans/{planId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isSuperAdmin();
    }

    // Collection Group Queries
    match /{path=**}/evaluations/{evaluationId} {
      allow read: if isSuperAdmin();
    }
  }
}

    