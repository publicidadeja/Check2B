rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.role == 'super_admin';
    }

    function isAdminOfOrg(orgIdFromPath) {
      return isSignedIn() && request.auth.token.role == 'admin' && request.auth.token.organizationId == orgIdFromPath;
    }

    function isMemberOfOrg(orgIdFromPath) {
      return isSignedIn() && request.auth.token.organizationId == orgIdFromPath && (request.auth.token.role == 'admin' || request.auth.token.role == 'collaborator');
    }

    function isSelf(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Default deny all reads and writes - Boa prática para começar
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userId} {
      // ALTERADO: Adicionado isMemberOfOrg(resource.data.organizationId) para permitir que colaboradores leiam perfis para o ranking.
      allow read: if isSelf(userId) ||
                     isAdminOfOrg(resource.data.organizationId) ||
                     isMemberOfOrg(resource.data.organizationId) || // << ADICIONADO PARA RANKING E DASHBOARD
                     isSuperAdmin();

      allow create: if isSuperAdmin();

      // ALTERADO: Especificado quais campos o usuário pode auto-atualizar.
      // Admins da organização e Super Admins podem atualizar mais amplamente.
      allow update: if (isSelf(userId) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['phone', 'photoUrl', 'updatedAt' /* Adicione aqui outros campos que o usuário pode atualizar no seu perfil */])) ||
                       (isAdminOfOrg(resource.data.organizationId) /* Admin pode atualizar usuários em sua org, todos os campos permitidos por padrão aqui, mas pode ser restringido */) ||
                       isSuperAdmin();

      allow delete: if isSuperAdmin();
    }

    // User-specific settings subcollection (example: notification preferences)
    match /users/{userId}/settings/notifications { // << ADICIONADO PARA FUNCIONALIDADE DO PERFIL
      allow read, write: if isSelf(userId);
    }

    // Organizations collection
    match /organizations/{orgId} {
      allow get: if isMemberOfOrg(orgId) || isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create, update, delete: if isSuperAdmin();

      // Default read access for members within their organization's subcollections
      // Esta regra já permite que colaboradores leiam tarefas, desafios, etc.
      // e também as avaliações e participações de *toda* a organização, o que é necessário para o cálculo do ranking no cliente.
      match /{subcollection}/{docId} {
        allow read: if isMemberOfOrg(orgId) || isSuperAdmin(); // SuperAdmin também pode ler subcoleções
      }

      // --- Specific write rules for subcollections ---

      match /tasks/{taskId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /roles/{roleId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /departments/{deptId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
      
      match /appSettings/{settingsDoc} {
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /rankingManagement/{rankingDoc} {
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
       match /challengeManagement/{settingsDoc} { // << ADICIONADO PARA CONSISTÊNCIA
        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /challenges/{challengeId} {
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }

      match /challengeParticipations/{partId} {
        // A leitura (get e list) já está coberta pela regra genérica de subcoleção acima
        // permitindo que isMemberOfOrg(orgId) leia.
        // As queries no cliente DEVEM filtrar por employeeId para o dashboard do colaborador,
        // mas para o ranking, o cliente precisa ler todas as participações.

        allow create: if isMemberOfOrg(orgId) && // Garante que é membro
                         request.resource.data.employeeId == request.auth.uid && // Garante que está criando para si mesmo
                         request.resource.data.organizationId == orgId; // Garante que está criando na organização correta

        // Colaborador pode atualizar (submeter) sua própria participação se status for 'accepted'
        // Admin pode atualizar (avaliar) qualquer participação em sua organização
        // SuperAdmin pode atualizar qualquer participação
        allow update: if (isMemberOfOrg(orgId) && isSelf(resource.data.employeeId) && resource.data.status == 'accepted' &&
                          request.resource.data.status == 'submitted' && request.resource.data.employeeId == request.auth.uid &&
                          request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'submissionText', 'submissionFileUrl', 'updatedAt', 'submittedAt'])) ||
                         (isAdminOfOrg(orgId) && request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'score', 'feedback', 'evaluatorId', 'evaluatedAt', 'updatedAt'])) ||
                         isSuperAdmin();
                         
        allow delete: if false;
      }

      match /evaluations/{evalId} {
        // A leitura (get e list) já está coberta pela regra genérica de subcoleção acima,
        // permitindo que isMemberOfOrg(orgId) leia.
        // As queries no cliente DEVEM filtrar por employeeId para o dashboard do colaborador,
        // mas para o ranking, o cliente precisa ler todas as avaliações.

        allow create, update: if isAdminOfOrg(orgId) || isSuperAdmin();
        allow delete: if false;
      }

      match /awardHistory/{historyId} {
        // read is covered by default rule for members
        allow create, update, delete: if isAdminOfOrg(orgId) || isSuperAdmin();
      }
    }

    // Global collections
    match /awards/{awardId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isSuperAdmin();
    }

    match /plans/{planId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isSuperAdmin();
    }

    // --- Collection Group Queries ---
    // Para `countRecentEvaluations` (usado no dashboard do super_admin)
    match /{path=**}/evaluations/{evaluationId} {
      allow read: if isSuperAdmin();
    }
  }
}