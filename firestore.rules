rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin of the organization
    function isAdmin(organizationId) {
      return request.auth.token.role == 'admin' && request.auth.token.organizationId == organizationId;
    }

    // Helper function to check if the user is a super_admin
    function isSuperAdmin() {
      return request.auth.token.role == 'super_admin';
    }

    // Helper function to check if the user is a collaborator of the organization
    function isCollaborator(organizationId) {
      return request.auth.token.role == 'collaborator' && request.auth.token.organizationId == organizationId;
    }
    
    // Helper function to check if the user is part of the organization (admin or collaborator)
    function isMemberOfOrganization(organizationId) {
      return request.auth.token.organizationId == organizationId && 
             (request.auth.token.role == 'admin' || request.auth.token.role == 'collaborator');
    }

    // Organizations collection
    match /organizations/{organizationId} {
      allow read: if isSuperAdmin() || request.auth.token.organizationId == organizationId;
      allow write: if isSuperAdmin(); // Only super_admins can create/update/delete organizations directly

      // Subcollection for tasks within an organization
      match /tasks/{taskId} {
        allow read: if isMemberOfOrganization(organizationId) || isSuperAdmin();
        allow write: if isAdmin(organizationId) || isSuperAdmin();
      }
      
      // Subcollection for departments within an organization
      match /departments/{departmentId} {
        allow read: if isMemberOfOrganization(organizationId) || isSuperAdmin();
        allow write: if isAdmin(organizationId) || isSuperAdmin();
      }
      
      // Subcollection for roles within an organization
      match /roles/{roleId} {
        allow read: if isMemberOfOrganization(organizationId) || isSuperAdmin();
        allow write: if isAdmin(organizationId) || isSuperAdmin();
      }
      
      // Add rules for other subcollections like evaluations, challenges, etc. here
      // Example for evaluations:
      // match /evaluations/{evaluationId} {
      //   allow read: if isMemberOfOrganization(organizationId) || isSuperAdmin();
      //               // Collaborators might only read their own evaluations
      //               // allow read: if (isCollaborator(organizationId) && resource.data.employeeId == request.auth.uid);
      //   allow write: if isAdmin(organizationId) || isSuperAdmin();
      // }

    }

    // Users collection (global)
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isSuperAdmin() || 
                     (isAdmin(request.auth.token.organizationId) && resource.data.organizationId == request.auth.token.organizationId);
                     // Admins can read users of their own organization
      allow write: if request.auth.uid == userId || isSuperAdmin(); // Users can update their own profile, super_admins can update any
      // More granular writes for admins creating users in their org would be handled by Cloud Functions
      // allow create: if isSuperAdmin() || (isAdmin(request.auth.token.organizationId) && request.resource.data.organizationId == request.auth.token.organizationId)
    }
    
    // Plans collection (global)
    match /plans/{planId} {
      allow read: if request.auth != null; // Authenticated users can read plans
      allow write: if isSuperAdmin(); // Only super_admins can create/update/delete plans
    }

    // Allow read for Genkit traces if needed (usually not client-facing)
    match /__genkit_traces/{traceId} {
      allow read, write: if false; // Default to no client access
    }
  }
}
